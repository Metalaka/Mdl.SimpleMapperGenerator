namespace Mdl.SimpleMapperGenerator.Internal.Ast.Write;

using System.Diagnostics;
using Mdl.SimpleMapperGenerator.Internal.Dto;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

internal static class SimpleMapperGenerator
{
    private const string ArgName = "from";
    private const string ClassName = "MapperFactory";
    private const string MethodName = "From";
    internal static CompilationUnitSyntax BuildFactory(Mapping[] mappings)
    {
        return CompilationUnit()
            .WithMembers(
                SingletonList<MemberDeclarationSyntax>(
                    FileScopedNamespaceDeclaration(
                            Utils.BuildQualifiedName(Utils.GetAssemblyNamespace().Split('.').ToArray()))
                        .WithLeadingTrivia(Comment("//<auto-generated>"))
                        .WithUsings(BuildUsing())
                        .WithMembers(
                            SingletonList<MemberDeclarationSyntax>(
                                ClassDeclaration(ClassName)
                                    .WithModifiers(
                                        TokenList(
                                            new[]
                                            {
                                                Token(SyntaxKind.PublicKeyword),
                                                Token(SyntaxKind.StaticKeyword),
                                            }))
                                    .WithMembers(BuildMappingMethods(mappings))))))
            .NormalizeWhitespace();
    }

    private static SyntaxList<UsingDirectiveSyntax> BuildUsing()
    {
        return List<UsingDirectiveSyntax>(
            new UsingDirectiveSyntax[]
            {
                UsingDirective(Utils.BuildQualifiedName("System")),
            });
    }

    private static SyntaxList<MemberDeclarationSyntax> BuildMappingMethods(IReadOnlyCollection<Mapping> mappings)
    {
        ICollection<MethodDeclarationSyntax> accumulator = new List<MethodDeclarationSyntax>(mappings.Count * 2);
        foreach (Mapping mapping in mappings)
        {
            // Build one method for each ways
            accumulator.Add(BuildMappingMethod(mapping.Dto, mapping.Entity, mapping.Properties));
            accumulator.Add(BuildMappingMethod(mapping.Entity, mapping.Dto, mapping.Properties));
        }

        return new SyntaxList<MemberDeclarationSyntax>(accumulator);
    }

    private static MethodDeclarationSyntax BuildMappingMethod(ClassDeclarationSyntax from, ClassDeclarationSyntax to, IReadOnlyCollection<IdentifierNameSyntax> properties)
    {
        return MethodDeclaration(
                IdentifierName(to.Identifier.Text),
                Identifier(MethodName))
            .WithModifiers(
                TokenList(
                    new[]
                    {
                        Token(SyntaxKind.PublicKeyword),
                        Token(SyntaxKind.StaticKeyword),
                    }))
            .WithParameterList(
                ParameterList(
                    SingletonSeparatedList<ParameterSyntax>(
                        Parameter(
                                Identifier(ArgName))
                            .WithType(
                                IdentifierName(from.Identifier.Text)))))
            .WithBody(
                Block(
                    SingletonList<StatementSyntax>(
                        ReturnStatement(
                            ImplicitObjectCreationExpression()
                                .WithInitializer(
                                    InitializerExpression(
                                        SyntaxKind.ObjectInitializerExpression,
                                        SeparatedList<ExpressionSyntax>(
                                            BuildInitializerExpression(properties))))))));
    }

    /// <summary>
    /// Build the following assignment for each properties.
    /// <code>Property = from.Property,</code>
    /// </summary>
    private static SyntaxNodeOrToken[] BuildInitializerExpression(IReadOnlyCollection<IdentifierNameSyntax> properties)
    {
        ICollection<SyntaxNodeOrToken> accumulator = new List<SyntaxNodeOrToken>(properties.Count * 2);
        foreach (IdentifierNameSyntax propertyName in properties)
        {
            accumulator.Add(BuildAssignment(propertyName));
            accumulator.Add(Token(SyntaxKind.CommaToken));
        }

        return accumulator.ToArray();
    }

    /// <summary>
    /// Build the assignment inside the new keyword.
    /// <code>Property = from.Property</code>
    /// </summary>
    private static AssignmentExpressionSyntax BuildAssignment(SimpleNameSyntax propertyName)
    {
        return AssignmentExpression(
            SyntaxKind.SimpleAssignmentExpression,
            propertyName,
            MemberAccessExpression(
                SyntaxKind.SimpleMemberAccessExpression,
                IdentifierName(ArgName),
                propertyName));
    }
}
